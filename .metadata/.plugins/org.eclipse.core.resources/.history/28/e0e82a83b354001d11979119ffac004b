package br.com.contasapagar;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import org.apache.tomcat.util.codec.binary.Base64;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController // Essa notação diz que essa classe é uma Controller, ou seja está dizendo que essa é uma aplicação REST
@RequestMapping("/v1")
public class ContasController {

    @Autowired
    ContaRepository repository;
    
    @Autowired
    private ServiceRelatorio serviceRelatorio;
    

    @GetMapping("/contasPaginadas")
    public Page<Conta> buscarContasPaginadas(Pageable pageable){

        return repository.findAll(pageable);
    }       
    
    @PostMapping("/contas")
    public Conta cadastrarConta(@RequestBody Conta conta){

        return repository.save(conta);
    }

    @PutMapping("/contas")
    public Conta atualizarConta(@RequestBody Conta conta){

        return repository.save(conta);
    }

    @DeleteMapping("/contas/{id}")
    public void excluirConta(@PathVariable("id") Integer id){
        repository.deleteById(id);
    }
    
    @PostMapping("/buscarPorFiltros")
    public ResponseEntity<List<Conta>> buscarPorFiltros(@RequestBody ContaFiltros contaFiltros){ 
    	
    	if(contaFiltros.getStatus() == null && contaFiltros.getMes() == null && contaFiltros.getAno() == null && contaFiltros.getVencida() == false && contaFiltros.getData1() == null && contaFiltros.getData2() == null){
    		
    		List<Conta> contas = repository.buscarContas();        	
        	return new ResponseEntity<List<Conta>>(contas, HttpStatus.OK);
    	}else if(contaFiltros.getStatus() != null && contaFiltros.getMes() == null && contaFiltros.getAno() == null && contaFiltros.getVencida() == false && contaFiltros.getData1() == null && contaFiltros.getData2() == null){
    		
    		List<Conta> contas = repository.buscarPorStatus(contaFiltros.getStatus());        	
        	return new ResponseEntity<List<Conta>>(contas, HttpStatus.OK);
    	}else if(contaFiltros.getStatus() == null && contaFiltros.getMes() != null){
    		
    		List<Conta> contas = repository.buscarPorMes(contaFiltros.getMes());       	
        	return new ResponseEntity<List<Conta>>(contas, HttpStatus.OK);
    	}else if(contaFiltros.getStatus() != null && contaFiltros.getMes() != null){
    		
    		List<Conta> contas = repository.buscarPorMesStatus(contaFiltros.getMes(), contaFiltros.getStatus());       	
        	return new ResponseEntity<List<Conta>>(contas, HttpStatus.OK);
    	}else if(contaFiltros.getStatus() == null && contaFiltros.getAno() != null){
    		
    		List<Conta> contas = repository.buscarPorAno(contaFiltros.getAno());       	
        	return new ResponseEntity<List<Conta>>(contas, HttpStatus.OK);
    	}else if(contaFiltros.getStatus() != null && contaFiltros.getAno() != null){
    		
    		List<Conta> contas = repository.buscarPorAnoStatus(contaFiltros.getAno(), contaFiltros.getStatus());       	
        	return new ResponseEntity<List<Conta>>(contas, HttpStatus.OK);
    	}else if(contaFiltros.getVencida() == true){
    		
    		List<Conta> contas = repository.buscarContasVencidas();       	
        	return new ResponseEntity<List<Conta>>(contas, HttpStatus.OK);
    	}else if(contaFiltros.getData1() != null && contaFiltros.getData2() != null && contaFiltros.getStatus() == null){
    		
    		List<Conta> contas = repository.buscarPorData(contaFiltros.getData1(), contaFiltros.getData2());      	
        	return new ResponseEntity<List<Conta>>(contas, HttpStatus.OK);
    	}else if(contaFiltros.getData1() != null && contaFiltros.getData2() != null && contaFiltros.getStatus() != null){
    		
    		List<Conta> contas = repository.buscarPorDataStatus(contaFiltros.getData1(), contaFiltros.getData2(), contaFiltros.getStatus());      	
        	return new ResponseEntity<List<Conta>>(contas, HttpStatus.OK);
    	}else {
    		
    		return null;
    	}
    }   
    
    
    @GetMapping(value = "/relatorios", produces = "application/text")
    public ResponseEntity<String> downloadPdf(HttpServletRequest request) throws Exception{
    	
    	String texto = "Paulo";
    	
    	byte[] pdf = serviceRelatorio.gerarRelatorio("RelatorioContas2", request.getServletContext());
    	
    	
    	String base64Pdf = "data:application/pdf;base64," + Base64.encodeBase64String(pdf);
		
    	return new ResponseEntity<String>(base64Pdf, HttpStatus.OK);
    }
    
    
}
